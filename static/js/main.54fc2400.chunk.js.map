{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","console","log","mintCharacterNFT","mintTxn","wait","warn","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","getCharacters","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","alert","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","Arena","currentAccount","boss","setBoss","attackState","setAttackState","showToast","runAttackAction","attackBoss","attackTxn","fetchBoss","getBigBoss","bossTxn","onAttackComplete","from","newBossHp","newPlayerHp","bossHp","playerHp","toString","toLowerCase","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54fc2400.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = \"0x2b94f59fCEC4BF79c7f273e50b31Bb166BA6127a\";\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // Actions\n  const mintCharacterNFTAction = async (characterId) => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n      setMintingCharacter(false);\n    }\n  };\n\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={() => mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n\n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n      alert(\n        `Your NFT is all done -- see it here: https://goerli.pixxiti.com/nfts/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\n/*\n * We pass in our characterNFT metadata so we can show a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT, currentAccount }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n     * Setup logic when this event is fired off\n     */\n    const onAttackComplete = (from, newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n      const sender = from.toString();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n       * If player is our own, update both player and boss Hp\n       */\n      if (currentAccount === sender.toLowerCase()) {\n        setBoss((prevState) => {\n          return { ...prevState, hp: bossHp };\n        });\n        setCharacterNFT((prevState) => {\n          return { ...prevState, hp: playerHp };\n        });\n      } else {\n        /*\n         * If player isn't ours, update boss Hp only\n         */\n        setBoss((prevState) => {\n          return { ...prevState, hp: bossHp };\n        });\n      }\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n\n    /*\n     * Make sure to clean up this event when this component is removed\n     */\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === \"attacking\" && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\n\nimport SelectCharacter from \"./Components/SelectCharacter\";\n\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\n\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport Arena from \"./Components/Arena\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\n\nimport { ethers } from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = \"belushkin\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst checkNetwork = async () => {\n  try {\n    if (window.ethereum.networkVersion !== \"5\") {\n      alert(\"Please connect to Goerli!\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  /*\n   * Right under current account, setup this new state property\n   */\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        /*\n         * We set isLoading here because we use return in the next line\n         */\n        setIsLoading(false);\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    /*\n     * We release the state property after all the function logic\n     */\n    setIsLoading(false);\n  };\n\n  const renderContent = () => {\n    /*\n     * If the app is currently loading, just render out LoadingIndicator\n     */\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena\n          characterNFT={characterNFT}\n          setCharacterNFT={setCharacterNFT}\n          currentAccount={currentAccount}\n        />\n      );\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const characterNFT = await gameContract.checkIfUserHasNFT();\n      if (characterNFT.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n\n      /*\n       * Once we are done with all the fetching, set loading state to false\n       */\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`@${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}